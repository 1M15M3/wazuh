#!/usr/bin/env python
# Copyright (C) 2015-2019, Wazuh Inc.
# March 13, 2018.
#
# This program is a free software; you can redistribute it
# and/or modify it under the terms of the GNU General Public
# License (version 2) as published by the FSF - Free Software
# Foundation.

import argparse
import json
import sys
import time
import os

try:
    import requests
    from requests.auth import HTTPBasicAuth
except Exception as e:
    print("No module 'requests' found. Install: pip install requests")
    sys.exit(1)

# ossec.conf configuration:
#  <integration>
#      <name>slack</name>
#      <hook_url>https://hooks.slack.com/services/XXXXXXXXXXXXXX</hook_url>
#      <alert_format>json</alert_format>
#  </integration>

# Global vars

debug_enabled = False
pwd = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
json_alert = {}
now = time.strftime("%a %b %d %H:%M:%S %Z %Y")

# Set paths
log_file = '{0}/logs/integrations.log'.format(pwd)

def get_args():
    """
    Gets input parameters.
    """
    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('-a', '--alert-file', dest='alert_file_location', help='Input log file',
                        required=True, action='store', default='')
    parser.add_argument('-d', '--debug', dest='debug', help='Debug',
                        action='store_true', default=False)
    parser.add_argument('-u', '--hook-url', dest='hook_url', help='Webhook URL',
                        required=True, action='store', default='')

    return parser.parse_args()

def main(args):
    debug("# Starting")

    alert_file_location = args.alert_file_location
    webhook = args.hook_url

    debug("# Webhook")
    debug(webhook)

    debug("# File location")
    debug(alert_file_location)

    # Load alert. Parse JSON object.
    with open(alert_file_location) as alert_file:
        json_alert = json.load(alert_file)
    debug("# Processing alert")
    debug(json_alert)

    debug("# Generating message")
    msg = generate_msg(json_alert)
    debug(msg)

    debug("# Sending message")
    send_msg(msg,webhook)


def debug(msg):
    if debug_enabled:
        msg = "{0}: {1}\n".format(now, msg)
        print(msg)
        f = open(log_file,"a")
        f.write(msg)
        f.close()

def generate_msg(alert):

    level = alert['rule']['level']

    if (level <= 4):
        color = "good"
    elif (level >= 5 and level <= 7):
        color= "warning"
    else:
        color= "danger"

    msg = {}
    msg['color'] = color
    msg['pretext'] = "WAZUH Alert"
    msg['title'] = alert['rule']['description']
    msg['text'] = alert.get('full_log')
    agent = { "title":"Agent", "value":"({0}) - {1}".format(alert['agent']['id'],alert['agent']['name']) }
    location = { "title":"Location", "value":alert['location'] }
    rule = { "title":"Rule ID", "value":"{0} _(Level {1})_".format(alert['rule']['id'],level) }
    msg['fields'] = [ agent, location, rule ]
    msg['ts'] = alert['id']
    attach = { 'attachments': [ msg ] }

    return json.dumps(attach)


def send_msg(msg,url):

    headers = {'content-type': 'application/json', 'Accept-Charset': 'UTF-8'}
    res = requests.post(url, data=msg, headers=headers)
    debug(res)


if __name__ == "__main__":
    try:
        # Read arguments
        args = get_args()

        bad_arguments = False
        if len(sys.argv) >= 4:
            msg = '{0} {1} {2} {3} {4}'.format(now, sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4] if len(sys.argv) > 4 else '')
            #debug_enabled = (len(sys.argv) > 4 and sys.argv[4] == 'debug')
            debug_enabled = True if args.debug is True else False
        else:
            msg = '{0} Wrong arguments'.format(now)
            bad_arguments = True

        # Logging the call
        f = open(log_file, 'a')
        f.write(msg +'\n')
        f.close()

        if bad_arguments:
            debug("# Exiting: Bad arguments.")
            sys.exit(1)

        # Main function
        main(args)

    except Exception as e:
        debug(str(e))
        raise
