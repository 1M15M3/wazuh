openapi: '3.0.0'
info:
  title: Wazuh API
  description: | 
    The Wazuh API is an open source RESTful API that allows for interaction with the Wazuh manager from a web browser, command line tool like cURL or any script or program that can make web requests. The Wazuh Kibana app relies on this heavily and Wazuh’s goal is to accommodate complete remote management of the Wazuh infrastructure via the Wazuh Kibana app. Use the API to easily perform everyday actions like adding an agent, restarting the manager(s) or agent(s) or looking up syscheck details.
  license:
    name: GPL 2.0
    url: 'https://github.com/wazuh/wazuh/blob/master/LICENSE'
  version: 4.0.0

components:
  schemas:
    ## Common models
    ApiResponse:
      type: object
      required:
      - error
      properties:
        error:
          type: integer
          format: int32
        message:
          type: string
    
    ListMetadata:
      type: object
      properties:
        totalItems:
          type: integer
          format: int32

    ## Agents models
    Agent:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/AgentStatus'
        configSum:
          type: string
        group:
          type: array
          items:
            type: string
        name:
          type: string
        mergedSum:
          type: string
        ip:
          type: string
        manager:
          type: string
        node_name:
          type: string
        dateAdd:
          type: string
        version:
          type: string
        lastKeepAlive:
          type: string
        os:
          type: object
          properties:
            major:
              type: string
            name:
              type: string
            uname:
              type: string
            platform:
              type: string
            version:
              type: string
            codename:
              type: string
            arch:
              type: string
            minor:
              type: string
        id:
          type: string
  
  
    AgentDeleted:
      type: object
      properties:
        msg:
          type: string
        affected_agents:
          type: array
          items:
            type: string
        failed_ids:
          type: array
          items:
            type: string
        older_than:
          type: string
        total_affected_agents:
          type: integer
          format: int32
    
    AgentStatus:
      type: string
      enum:
      - active
      - pending
      - neverconnected
      - disconnected
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
      description: "Intended method to get a token"
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  parameters:
    olderThanParam:
      in: query
      name: older_than
      description: |
        Filters out disconnected agents for longer than specified. Time in seconds, ‘[n_days]d’, ‘[n_hours]h’, ‘[n_minutes]m’ or ‘[n_seconds]s’. For never connected agents, uses the register date.
      schema:
        type: string
    statusParam:
      in: query
      name: status
      description: Filters by agent status. Use commas to enter multiple statuses.
      schema:
        type: array
        items:
          type: string
          enum:
          - active
          - pending
          - neverconnected
          - disconnected
    agent_id:
      in: path
      name: agent_id
      description: Agent ID
      required: true
      schema:
        type: integer
    group_id:
      in: path
      name: group_id
      description: Group ID.
      required: true
      schema:
        type: string
    pretty:
      in: query
      name: pretty
      description: Show results in human-readable format
      schema:
        type: boolean
    wait_for_complete:
      in: query
      name: wait_for_complete
      description: Disable timeout response
      schema:
        type: boolean
    offset:
      in: query
      name: offset
      description: First element to return in the collection
      schema:
        type: integer
        format: int32
    limit:  
      in: query
      name: limit
      description: Maximum number of elements to return
      schema:
        type: integer
        format: int32
    select:  
      in: query
      name: select
      description: Select which fields to return (separated by comma)
      schema:
        type: array
        items:
          type: string
    # It'd be more appropriate to be an array of strings, and separate the ascending or descending order in another param
    sort:
      in: query
      name: sort
      description: |
            Sorts the collection by a field or fields (separated by comma). Use +/- at the beginning to list in ascending or descending order.
      schema:
        type: string
    search:
      in: query
      name: search
      description: Looks for elements with the specified string
      schema:
        type: string
    query:
      in: query
      name: q
      description: Query to filter results by. For example q=&quot;status=Active&quot;
      schema:
        type: string
    purge:
      in: query
      name: purge
      description: Delete an agent from the key store
      schema:
        type: boolean
  
tags:
  - name: active-response
    description: 'Agents Active Response'
  - name: agents
    description: 'Agents management related operations'
  - name: cache
    description: ''
  - name: ciscat
    description: ''
  - name: cluster
    description: ''
  - name: configuration-assessment
    description: ''
  - name: decoders
    description: ''
  - name: experimental
    description: ''
  - name: lists
    description: ''
  - name: login
    description: 'User authentication'
  - name: manager
    description: ''
  - name: rootcheck
    description: ''
  - name: rules
    description: ''
  - name: syscheck
    description: ''
  - name: syscollector
    description: ''

security:
    - authToken: []

paths:
  /active-response/{agent_id}:
    put:
      tags:
        - active-response
      summary: 'Run an AR command in the agent'
      description: 'Runs an Active Response command on a specified agent'
      operationId: activeResponse
      parameters:
        - $ref: '#/components/parameters/agent_id'
      
      requestBody:
        content:
          application/json:
              schema:
                properties:
                  command:
                    description: Command.
                    type: string
                    
                  custom:
                    description: Custom.
                    type: boolean
  
                  arguments:
                    description: Command arguments.
                    type: array
                    items:
                      type: string
      responses:
        '200':
          description: 'Command send to agent'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                example:
                  data: "Command sent."
                  error: 0

  /agents:
    delete:
      tags:
      - agents
      summary: Delete agents
      description: |
        Removes agents, using a list of them or a criterion based on the status or time of the last connection. The Wazuh API must be restarted after removing an agent.
      operationId: deleteAgents
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - in: query
          name: ids
          description: Array of agent ID’s
          schema:
            type: array
            items:
              type: string
        - $ref: '#/components/parameters/purge'
        - $ref: '#/components/parameters/statusParam'
        - $ref: '#/components/parameters/olderThanParam'
      responses:
        '200':
          description: Delete agents
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AgentDeleted'
              example:
                error: 0
                data:
                  msg: All selected agents were removed
                  affected_agents:
                  - '003'
                  - '005'
                  older_than: 10s
                  total_affected_agents: 2
    get:
      tags:
      - agents
      summary: 'Get all agents'
      description: 'Returns a list with the available agents.'
      operationId: getAllAgents
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/select'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/statusParam'
        - $ref: '#/components/parameters/olderThanParam'
        - in: query
          name: os.platform
          description: Filters by OS platform.
          schema:
            type: string
        - in: query
          name: os.version
          description: Filters by OS version.
          schema:
            type: string
        - in: query
          name: os.name
          description: Filters by OS name.
          schema:
            type: string
        - in: query
          name: manager
          description: Filters by manager hostname to which agents are connected.
          schema:
            type: string
        - in: query
          name: version
          description: Filters by agents version.
          schema:
            type: string
        - in: query
          name: group
          description: Filters by group of agents.
          schema:
            type: string
        - in: query
          name: node_name
          description: Filters by node name.
          schema:
            type: string
        - in: query
          name: name
          description: Filters by agent name.
          schema:
            type: string
        - in: query
          name: ip
          description: Filters by agent IP
          schema:
            type: string
      responses:
        '200':
          description: 'List of agents or error description'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      allOf:
                        - $ref: '#/components/schemas/ListMetadata'
                        - type: object
                          properties:
                            items:
                              type: array
                              items:
                                $ref: '#/components/schemas/Agent'
              example:
                error: 0
                data:
                  totalItems: 7
                  items:
                  - status: Active
                    configSum: ab73af41699f13fdd81903b5f23d8d00
                    group:
                    - default
                    name: agent1
                    mergedSum: f1a9e24e02ba4cc5ea80a9d3feb3bb9a
                    ip: 192.168.185.7
                    manager: manager
                    node_name: node02
                    dateAdd: '2018-10-11 09:38:47'
                    version: Wazuh v3.8.0
                    lastKeepAlive: '2018-10-11 13:58:08'
                    os:
                      major: '16'
                      name: Ubuntu
                      uname: Linux |ubuntu |4.4.0-135-generic |#161-Ubuntu SMP Mon Aug 27 10:45:01
                        UTC 2018 |x86_64
                      platform: ubuntu
                      version: 16.04.5 LTS
                      codename: Xenial Xerus
                      arch: x86_64
                      minor: '04'
                    id: '001'
                  - status: Active
                    name: manager
                    ip: 127.0.0.1
                    manager: manager
                    node_name: node01
                    dateAdd: '2018-10-11 09:37:23'
                    version: Wazuh v3.8.0
                    lastKeepAlive: '9999-12-31 23:59:59'
                    os:
                      major: '18'
                      name: Ubuntu
                      uname: Linux |manager |4.15.0-36-generic |#39-Ubuntu SMP Mon Sep 24 16:19:09
                        UTC 2018 |x86_64
                      platform: ubuntu
                      version: 18.04.1 LTS
                      codename: Bionic Beaver
                      arch: x86_64
                      minor: '04'
                    id: '000'
                  - status: Never connected
                    dateAdd: '2018-10-11 13:58:23'
                    name: NewHost_2
                    ip: 10.0.10.10
                    id: '123'
                    node_name: unknown
                  - status: Never connected
                    dateAdd: '2018-10-11 13:58:22'
                    name: NewHost
                    ip: 10.0.0.9
                    id: '007'
                    node_name: unknown
                  - status: Never connected
                    dateAdd: '2018-10-11 13:58:10'
                    group:
                    - default
                    name: server001
                    ip: 10.0.0.62
                    id: '002'
                    node_name: unknown
  
  /agents/{agent_id}:
    delete:
      tags:
        - agents
      summary: 'Delete an agent'
      description: 'Removes an agent.'
      operationId: deleteAgent
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/agent_id'
        - $ref: '#/components/parameters/purge'
      responses:
        '200':
          description: 'Delete agent'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AgentDeleted'
              example:
                error: 0
                data:
                  msg: All selected agents were removed
                  affected_agents:
                  - '008'
  
  /agents/{agent_id}/group:
    delete:
      tags:
        - agents
      summary: 'Remove all agent groups.'
      description: 'Removes the group of the agent. The agent will automatically revert to the "default" group.'
      operationId: deleteAgentGroup
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/agent_id'
      responses:
        '200':
          description: 'Remove the group of the agent'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                example:
                  error: 0
                  data: "Group unset for agent '004'."
                  
  /agents/{agent_id}/group/{group_id}:
    delete:
      tags:
        - agents
      summary: 'Remove a single group of an agent'
      description: 'Remove the group of the agent but will leave the rest of its group if it belongs to a multigroup.'
      operationId: deleteAgentSingleGroup
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/agent_id'
        - $ref: '#/components/parameters/group_id'
      responses:
        '200':
          description: 'Remove the group of the agent'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                example:
                  error: 0
                  data: "Group 'dmz' unset for agent '004'."
  
  /agents/restart:
    put:
      tags:
      - agents
      summary: 'Restarts all agents'
      operationId: restart_all_agents
      parameters:
        - $ref: '#/components/parameters/wait_for_complete'
      responses:
        '200':
          description: Agents restarted
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                example:
                  error: 0
                  data: "Restarting all agents"
                  
  /token:
    get:
      tags:
      - login
      summary: 'User/password authentication to get an access token'
      description: 'This method should be called to get an API token. This token will expire at some time.'
      operationId: loginUser
      security:
        - basicAuth: []
      responses:
        '200':
          description: 'Login successful'
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: 'Access unauthorized'

externalDocs:
  description: Find more about Wazuh API usage
  url: 'https://documentation.wazuh.com/current/user-manual/api/index.html'
